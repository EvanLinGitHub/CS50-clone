'\" t
.\"     Title: get_string
.\"    Author: [see the "AUTHORS" section]
.\" Generator: Asciidoctor 1.5.5
.\"      Date: 2017-07-09
.\"    Manual: CS50 Programmer's Manual
.\"    Source: CS50
.\"  Language: English
.\"
.TH "GET_STRING" "3" "2017-07-09" "CS50" "CS50 Programmer\(aqs Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\\$2 \(laURL: \\$1 \(ra\\$3
..
.if \n[.g] .mso www.tmac
.LINKSTYLE blue R < >
.SH "NAME"
get_string \- prompts user for a line of text from stdin and returns it as a string
.SH "SYNOPSIS"
.sp
\fB#include <cs50.h>\fP
.sp
\fBstring get_string(string prompt);\fP
.SH "DESCRIPTION"
.sp
Prompts user for a line of text from standard input and returns it as a string (char *), sans trailing line ending. Supports CR (\(rsr), LF (\(rsn), and CRLF (\(rsr\(rsn) as line endings. Stores string on heap, but library\(cqs destructor frees memory on program\(cqs exit.
.SH "RETURN VALUE"
.sp
Returns the read line as a string. If user inputs only a line ending, returns "", not NULL. Returns NULL upon error or no input whatsoever (i.e., just EOF).
.SH "EXAMPLE"
.sp
.if n \{\
.RS 4
.\}
.nf
// attempt to read string from stdin
string s = get_string("Enter string: ");
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
// ensure string was read
if (s != NULL)
{
    printf("You entered: %s\(rsn", s);
}
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
.if n \{\
.RS 4
.\}
.nf
get_char(3), get_double(3), get_float(3), get_int(3),
get_long_long(3)
.fi
.if n \{\
.RE
.\}