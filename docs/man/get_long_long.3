'\" t
.\"     Title: get_long_long
.\"    Author: [see the "AUTHORS" section]
.\" Generator: Asciidoctor 1.5.5
.\"      Date: 2017-07-09
.\"    Manual: CS50 Programmer's Manual
.\"    Source: CS50
.\"  Language: English
.\"
.TH "GET_LONG_LONG" "3" "2017-07-09" "CS50" "CS50 Programmer\(aqs Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\\$2 \(laURL: \\$1 \(ra\\$3
..
.if \n[.g] .mso www.tmac
.LINKSTYLE blue R < >
.SH "NAME"
get_long_long \- prompts user for a line of text from stdin and returns the equivalent long long
.SH "SYNOPSIS"
.sp
\fB#include <cs50.h>\fP
.sp
\fBlong long get_long_long(string prompt);\fP
.SH "DESCRIPTION"
.sp
Prompts user for a line of text from standard input and returns the equivalent long long; if text does not represent a long long in [\fBLLONG_MIN\fP, \fBLLONG_MAX\fP) or would cause underflow or overflow, user is prompted to retry.
.SH "RETURN VALUE"
.sp
Returns the equivalent long long of the line read from stdin in [\fBLLONG_MIN\fP, \fBLLONG_MAX\fP). If line can\(cqt be read, returns \fBLLONG_MAX\fP.
.SH "EXAMPLE"
.sp
.if n \{\
.RS 4
.\}
.nf
// attempt to read long long from stdin
long long ll = get_long_long("Enter long long: ");
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
// ensure long long was read
if (ll != LLONG_MAX)
{
    printf("You entered: %lld\(rsn", ll);
}
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
.if n \{\
.RS 4
.\}
.nf
get_char(3), get_double(3), get_float(3), get_int(3), get_string(3)
.fi
.if n \{\
.RE
.\}